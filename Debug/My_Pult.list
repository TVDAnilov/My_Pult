
My_Pult.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004714  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004858  08004858  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004858  08004858  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004858  08004858  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  2000000c  0800486c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800486c  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e9b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee6  00000000  00000000  00031ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00034db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00035f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189b7  00000000  00000000  00037038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015db0  00000000  00000000  0004f9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c050  00000000  00000000  0006579f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f17ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000495c  00000000  00000000  000f1844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004808 	.word	0x08004808

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004808 	.word	0x08004808

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b2e      	ldr	r3, [pc, #184]	; (8000218 <MX_ADC1_Init+0xcc>)
 800015e:	4a2f      	ldr	r2, [pc, #188]	; (800021c <MX_ADC1_Init+0xd0>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016a:	4b2b      	ldr	r3, [pc, #172]	; (8000218 <MX_ADC1_Init+0xcc>)
 800016c:	2200      	movs	r2, #0
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b29      	ldr	r3, [pc, #164]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b26      	ldr	r3, [pc, #152]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000186:	2204      	movs	r2, #4
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4823      	ldr	r0, [pc, #140]	; (8000218 <MX_ADC1_Init+0xcc>)
 800018c:	f000 ff74 	bl	8001078 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fcff 	bl	8000b98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80001a2:	2305      	movs	r3, #5
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	481b      	ldr	r0, [pc, #108]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001ac:	f001 f9f8 	bl	80015a0 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fcef 	bl	8000b98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4814      	ldr	r0, [pc, #80]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001c8:	f001 f9ea 	bl	80015a0 <HAL_ADC_ConfigChannel>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d2:	f000 fce1 	bl	8000b98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001d6:	2302      	movs	r3, #2
 80001d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001da:	2303      	movs	r3, #3
 80001dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4619      	mov	r1, r3
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001e4:	f001 f9dc 	bl	80015a0 <HAL_ADC_ConfigChannel>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001ee:	f000 fcd3 	bl	8000b98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001f2:	2303      	movs	r3, #3
 80001f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4619      	mov	r1, r3
 80001fe:	4806      	ldr	r0, [pc, #24]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000200:	f001 f9ce 	bl	80015a0 <HAL_ADC_ConfigChannel>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800020a:	f000 fcc5 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	2000009c 	.word	0x2000009c
 800021c:	40012400 	.word	0x40012400

08000220 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000228:	f107 0310 	add.w	r3, r7, #16
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a28      	ldr	r2, [pc, #160]	; (80002dc <HAL_ADC_MspInit+0xbc>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d149      	bne.n	80002d4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000240:	4b27      	ldr	r3, [pc, #156]	; (80002e0 <HAL_ADC_MspInit+0xc0>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a26      	ldr	r2, [pc, #152]	; (80002e0 <HAL_ADC_MspInit+0xc0>)
 8000246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800024a:	6193      	str	r3, [r2, #24]
 800024c:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <HAL_ADC_MspInit+0xc0>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000258:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <HAL_ADC_MspInit+0xc0>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a20      	ldr	r2, [pc, #128]	; (80002e0 <HAL_ADC_MspInit+0xc0>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <HAL_ADC_MspInit+0xc0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0304 	and.w	r3, r3, #4
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000270:	230f      	movs	r3, #15
 8000272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000274:	2303      	movs	r3, #3
 8000276:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000278:	f107 0310 	add.w	r3, r7, #16
 800027c:	4619      	mov	r1, r3
 800027e:	4819      	ldr	r0, [pc, #100]	; (80002e4 <HAL_ADC_MspInit+0xc4>)
 8000280:	f002 f806 	bl	8002290 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <HAL_ADC_MspInit+0xcc>)
 8000288:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 8000298:	2280      	movs	r2, #128	; 0x80
 800029a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 800029e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 80002a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002b8:	480b      	ldr	r0, [pc, #44]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 80002ba:	f001 fd4b 	bl	8001d54 <HAL_DMA_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80002c4:	f000 fc68 	bl	8000b98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 80002cc:	621a      	str	r2, [r3, #32]
 80002ce:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <HAL_ADC_MspInit+0xc8>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002d4:	bf00      	nop
 80002d6:	3720      	adds	r7, #32
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40012400 	.word	0x40012400
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010800 	.word	0x40010800
 80002e8:	200000cc 	.word	0x200000cc
 80002ec:	40020008 	.word	0x40020008

080002f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_CRC_Init+0x20>)
 80002f6:	4a07      	ldr	r2, [pc, #28]	; (8000314 <MX_CRC_Init+0x24>)
 80002f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <MX_CRC_Init+0x20>)
 80002fc:	f001 fd0d 	bl	8001d1a <HAL_CRC_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000306:	f000 fc47 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000110 	.word	0x20000110
 8000314:	40023000 	.word	0x40023000

08000318 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <HAL_CRC_MspInit+0x34>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d10b      	bne.n	8000342 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <HAL_CRC_MspInit+0x38>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a08      	ldr	r2, [pc, #32]	; (8000350 <HAL_CRC_MspInit+0x38>)
 8000330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_CRC_MspInit+0x38>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40023000 	.word	0x40023000
 8000350:	40021000 	.word	0x40021000

08000354 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_DMA_Init+0x58>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a13      	ldr	r2, [pc, #76]	; (80003ac <MX_DMA_Init+0x58>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_DMA_Init+0x58>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	2100      	movs	r1, #0
 8000376:	200b      	movs	r0, #11
 8000378:	f001 fc99 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800037c:	200b      	movs	r0, #11
 800037e:	f001 fcb2 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	2100      	movs	r1, #0
 8000386:	200e      	movs	r0, #14
 8000388:	f001 fc91 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800038c:	200e      	movs	r0, #14
 800038e:	f001 fcaa 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	200f      	movs	r0, #15
 8000398:	f001 fc89 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800039c:	200f      	movs	r0, #15
 800039e:	f001 fca2 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b22      	ldr	r3, [pc, #136]	; (8000450 <MX_GPIO_Init+0xa0>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a21      	ldr	r2, [pc, #132]	; (8000450 <MX_GPIO_Init+0xa0>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <MX_GPIO_Init+0xa0>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0304 	and.w	r3, r3, #4
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <MX_GPIO_Init+0xa0>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <MX_GPIO_Init+0xa0>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b19      	ldr	r3, [pc, #100]	; (8000450 <MX_GPIO_Init+0xa0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	603b      	str	r3, [r7, #0]
 80003f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003fa:	4816      	ldr	r0, [pc, #88]	; (8000454 <MX_GPIO_Init+0xa4>)
 80003fc:	f002 f8c2 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800040a:	2301      	movs	r3, #1
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	480e      	ldr	r0, [pc, #56]	; (8000454 <MX_GPIO_Init+0xa4>)
 800041a:	f001 ff39 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800041e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_GPIO_Init+0xa8>)
 8000426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000428:	2301      	movs	r3, #1
 800042a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042c:	f107 0308 	add.w	r3, r7, #8
 8000430:	4619      	mov	r1, r3
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <MX_GPIO_Init+0xa4>)
 8000434:	f001 ff2c 	bl	8002290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2100      	movs	r1, #0
 800043c:	2028      	movs	r0, #40	; 0x28
 800043e:	f001 fc36 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000442:	2028      	movs	r0, #40	; 0x28
 8000444:	f001 fc4f 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

}
 8000448:	bf00      	nop
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	40010c00 	.word	0x40010c00
 8000458:	10110000 	.word	0x10110000

0800045c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_I2C1_Init+0x50>)
 8000462:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <MX_I2C1_Init+0x54>)
 8000464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_I2C1_Init+0x50>)
 8000468:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <MX_I2C1_Init+0x58>)
 800046a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_I2C1_Init+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_I2C1_Init+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_I2C1_Init+0x50>)
 800047a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800047e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <MX_I2C1_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_I2C1_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <MX_I2C1_Init+0x50>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_I2C1_Init+0x50>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <MX_I2C1_Init+0x50>)
 800049a:	f002 f8ad 	bl	80025f8 <HAL_I2C_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004a4:	f000 fb78 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000118 	.word	0x20000118
 80004b0:	40005400 	.word	0x40005400
 80004b4:	00061a80 	.word	0x00061a80

080004b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a15      	ldr	r2, [pc, #84]	; (8000528 <HAL_I2C_MspInit+0x70>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d123      	bne.n	8000520 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <HAL_I2C_MspInit+0x74>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a13      	ldr	r2, [pc, #76]	; (800052c <HAL_I2C_MspInit+0x74>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <HAL_I2C_MspInit+0x74>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004f0:	23c0      	movs	r3, #192	; 0xc0
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f4:	2312      	movs	r3, #18
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	480b      	ldr	r0, [pc, #44]	; (8000530 <HAL_I2C_MspInit+0x78>)
 8000504:	f001 fec4 	bl	8002290 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_I2C_MspInit+0x74>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_I2C_MspInit+0x74>)
 800050e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000512:	61d3      	str	r3, [r2, #28]
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_I2C_MspInit+0x74>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40005400 	.word	0x40005400
 800052c:	40021000 	.word	0x40021000
 8000530:	40010c00 	.word	0x40010c00

08000534 <crc>:
	volatile uint8_t counterError;


} flagEvent;

uint8_t crc(uint8_t *pData, uint8_t size) {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < size; i++) {
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]
 8000548:	e019      	b.n	800057e <crc+0x4a>
		crc = crc + (pData[i] * 44111);
 800054a:	7b7b      	ldrb	r3, [r7, #13]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b29b      	uxth	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	0112      	lsls	r2, r2, #4
 8000558:	441a      	add	r2, r3
 800055a:	4611      	mov	r1, r2
 800055c:	0189      	lsls	r1, r1, #6
 800055e:	1a8a      	subs	r2, r1, r2
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	4413      	add	r3, r2
 8000564:	461a      	mov	r2, r3
 8000566:	0091      	lsls	r1, r2, #2
 8000568:	461a      	mov	r2, r3
 800056a:	460b      	mov	r3, r1
 800056c:	4413      	add	r3, r2
 800056e:	425b      	negs	r3, r3
 8000570:	b29a      	uxth	r2, r3
 8000572:	89fb      	ldrh	r3, [r7, #14]
 8000574:	4413      	add	r3, r2
 8000576:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < size; i++) {
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	3301      	adds	r3, #1
 800057c:	737b      	strb	r3, [r7, #13]
 800057e:	7b7a      	ldrb	r2, [r7, #13]
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	429a      	cmp	r2, r3
 8000584:	d3e1      	bcc.n	800054a <crc+0x16>
	}
	return (uint8_t) crc;
 8000586:	89fb      	ldrh	r3, [r7, #14]
 8000588:	b2db      	uxtb	r3, r3

}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <transmit>:

void transmit(void){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	flagEvent.dataReady = 1;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <transmit+0x14>)
 800059a:	2201      	movs	r2, #1
 800059c:	709a      	strb	r2, [r3, #2]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000016c 	.word	0x2000016c

080005ac <cleanTxArr>:




void cleanTxArr(uint8_t adress_slave_device) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < end_array_index; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e006      	b.n	80005ca <cleanTxArr+0x1e>
		transmitBuff[i] = 0xFF; // код стоп байта
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <cleanTxArr+0x48>)
 80005c0:	21ff      	movs	r1, #255	; 0xff
 80005c2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < end_array_index; i++) {
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	3301      	adds	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b31      	cmp	r3, #49	; 0x31
 80005ce:	d9f5      	bls.n	80005bc <cleanTxArr+0x10>
	}
	transmitBuff[adress_slave_index] = adress_slave_device;
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <cleanTxArr+0x48>)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	7013      	strb	r3, [r2, #0]
	transmitBuff[adress_master_index] = adress_master_device;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <cleanTxArr+0x48>)
 80005d8:	2220      	movs	r2, #32
 80005da:	705a      	strb	r2, [r3, #1]

	transmitBuff[crc_adress_devices] = crc(transmitBuff, 2);    //crc
 80005dc:	2102      	movs	r1, #2
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <cleanTxArr+0x48>)
 80005e0:	f7ff ffa8 	bl	8000534 <crc>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <cleanTxArr+0x48>)
 80005ea:	709a      	strb	r2, [r3, #2]

}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000028 	.word	0x20000028

080005f8 <initPult>:

void initPult(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	flagEvent.timerEvent = 0;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <initPult+0x48>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	flagEvent.adcDone = 0;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <initPult+0x48>)
 8000604:	2200      	movs	r2, #0
 8000606:	705a      	strb	r2, [r3, #1]
	flagEvent.dataReady = 0;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <initPult+0x48>)
 800060a:	2200      	movs	r2, #0
 800060c:	709a      	strb	r2, [r3, #2]
	flagEvent.rxReady = 0;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <initPult+0x48>)
 8000610:	2200      	movs	r2, #0
 8000612:	70da      	strb	r2, [r3, #3]
	flagEvent.txReady = 0;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <initPult+0x48>)
 8000616:	2200      	movs	r2, #0
 8000618:	711a      	strb	r2, [r3, #4]
	flagEvent.rxSize = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <initPult+0x48>)
 800061c:	2200      	movs	r2, #0
 800061e:	715a      	strb	r2, [r3, #5]
	flagEvent.contact = 0;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <initPult+0x48>)
 8000622:	2200      	movs	r2, #0
 8000624:	719a      	strb	r2, [r3, #6]
	flagEvent.counterError = 0;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <initPult+0x48>)
 8000628:	2200      	movs	r2, #0
 800062a:	71da      	strb	r2, [r3, #7]


	HAL_ADCEx_Calibration_Start(&hadc1);			// калибровка ацп
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <initPult+0x4c>)
 800062e:	f001 f9b1 	bl	8001994 <HAL_ADCEx_Calibration_Start>

	//HAL_UART_Receive_DMA(&huart1, reciveBuff, 5);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, reciveBuff, sizeof(reciveBuff));
 8000632:	2232      	movs	r2, #50	; 0x32
 8000634:	4904      	ldr	r1, [pc, #16]	; (8000648 <initPult+0x50>)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <initPult+0x54>)
 8000638:	f003 fb54 	bl	8003ce4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000016c 	.word	0x2000016c
 8000644:	2000009c 	.word	0x2000009c
 8000648:	2000005c 	.word	0x2000005c
 800064c:	20000244 	.word	0x20000244

08000650 <updateTimerEvent>:

void updateTimerEvent(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) SticPosADC, 4);
 8000654:	2204      	movs	r2, #4
 8000656:	4903      	ldr	r1, [pc, #12]	; (8000664 <updateTimerEvent+0x14>)
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <updateTimerEvent+0x18>)
 800065a:	f000 fde5 	bl	8001228 <HAL_ADC_Start_DMA>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000090 	.word	0x20000090
 8000668:	2000009c 	.word	0x2000009c

0800066c <normalizeSticValue>:

void normalizeSticValue(void) {
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

	/////////////////////////////////////////////////////////////////////// Вперед
	if (SticPosADC[1] < 700) {
 8000670:	4b5b      	ldr	r3, [pc, #364]	; (80007e0 <normalizeSticValue+0x174>)
 8000672:	885b      	ldrh	r3, [r3, #2]
 8000674:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000678:	d205      	bcs.n	8000686 <normalizeSticValue+0x1a>
		position[0] = 100;
 800067a:	4b5a      	ldr	r3, [pc, #360]	; (80007e4 <normalizeSticValue+0x178>)
 800067c:	2264      	movs	r2, #100	; 0x64
 800067e:	701a      	strb	r2, [r3, #0]
		position[1] = 1;
 8000680:	4b58      	ldr	r3, [pc, #352]	; (80007e4 <normalizeSticValue+0x178>)
 8000682:	2201      	movs	r2, #1
 8000684:	705a      	strb	r2, [r3, #1]
	}
	if (SticPosADC[1] < 1400 && SticPosADC[1] > 700) {
 8000686:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <normalizeSticValue+0x174>)
 8000688:	885b      	ldrh	r3, [r3, #2]
 800068a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800068e:	d20a      	bcs.n	80006a6 <normalizeSticValue+0x3a>
 8000690:	4b53      	ldr	r3, [pc, #332]	; (80007e0 <normalizeSticValue+0x174>)
 8000692:	885b      	ldrh	r3, [r3, #2]
 8000694:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000698:	d905      	bls.n	80006a6 <normalizeSticValue+0x3a>
		position[0] = 65;
 800069a:	4b52      	ldr	r3, [pc, #328]	; (80007e4 <normalizeSticValue+0x178>)
 800069c:	2241      	movs	r2, #65	; 0x41
 800069e:	701a      	strb	r2, [r3, #0]
		position[1] = 1;
 80006a0:	4b50      	ldr	r3, [pc, #320]	; (80007e4 <normalizeSticValue+0x178>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	705a      	strb	r2, [r3, #1]
	}

	if (SticPosADC[1] < 1800 && SticPosADC[1] > 1400) {
 80006a6:	4b4e      	ldr	r3, [pc, #312]	; (80007e0 <normalizeSticValue+0x174>)
 80006a8:	885b      	ldrh	r3, [r3, #2]
 80006aa:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80006ae:	d20a      	bcs.n	80006c6 <normalizeSticValue+0x5a>
 80006b0:	4b4b      	ldr	r3, [pc, #300]	; (80007e0 <normalizeSticValue+0x174>)
 80006b2:	885b      	ldrh	r3, [r3, #2]
 80006b4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80006b8:	d905      	bls.n	80006c6 <normalizeSticValue+0x5a>
		position[0] = 30;
 80006ba:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <normalizeSticValue+0x178>)
 80006bc:	221e      	movs	r2, #30
 80006be:	701a      	strb	r2, [r3, #0]
		position[1] = 1;
 80006c0:	4b48      	ldr	r3, [pc, #288]	; (80007e4 <normalizeSticValue+0x178>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	705a      	strb	r2, [r3, #1]
	}

	////////////////////////////////////////////////////////////////////////////////// назад

	if (SticPosADC[1] > 2200) {
 80006c6:	4b46      	ldr	r3, [pc, #280]	; (80007e0 <normalizeSticValue+0x174>)
 80006c8:	885b      	ldrh	r3, [r3, #2]
 80006ca:	f640 0298 	movw	r2, #2200	; 0x898
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d905      	bls.n	80006de <normalizeSticValue+0x72>
		position[0] = 20;
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <normalizeSticValue+0x178>)
 80006d4:	2214      	movs	r2, #20
 80006d6:	701a      	strb	r2, [r3, #0]
		position[1] = 2;
 80006d8:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <normalizeSticValue+0x178>)
 80006da:	2202      	movs	r2, #2
 80006dc:	705a      	strb	r2, [r3, #1]
	}

	/////////////////////////////////////////////////////////////////////////////////////// на месте

	if (SticPosADC[1] > 1800 && SticPosADC[1] < 2200) {
 80006de:	4b40      	ldr	r3, [pc, #256]	; (80007e0 <normalizeSticValue+0x174>)
 80006e0:	885b      	ldrh	r3, [r3, #2]
 80006e2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80006e6:	d90b      	bls.n	8000700 <normalizeSticValue+0x94>
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <normalizeSticValue+0x174>)
 80006ea:	885b      	ldrh	r3, [r3, #2]
 80006ec:	f640 0297 	movw	r2, #2199	; 0x897
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d805      	bhi.n	8000700 <normalizeSticValue+0x94>
		position[0] = 0;
 80006f4:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <normalizeSticValue+0x178>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
		position[1] = 0;
 80006fa:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <normalizeSticValue+0x178>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	705a      	strb	r2, [r3, #1]
	}
	///////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////// Направо
	if (SticPosADC[2] < 700) {
 8000700:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <normalizeSticValue+0x174>)
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000708:	d205      	bcs.n	8000716 <normalizeSticValue+0xaa>
		position[2] = 75;
 800070a:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <normalizeSticValue+0x178>)
 800070c:	224b      	movs	r2, #75	; 0x4b
 800070e:	709a      	strb	r2, [r3, #2]
		position[3] = 1;
 8000710:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <normalizeSticValue+0x178>)
 8000712:	2201      	movs	r2, #1
 8000714:	70da      	strb	r2, [r3, #3]
	}
	if (SticPosADC[2] < 1400 && SticPosADC[2] > 700) {
 8000716:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <normalizeSticValue+0x174>)
 8000718:	889b      	ldrh	r3, [r3, #4]
 800071a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800071e:	d20a      	bcs.n	8000736 <normalizeSticValue+0xca>
 8000720:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <normalizeSticValue+0x174>)
 8000722:	889b      	ldrh	r3, [r3, #4]
 8000724:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000728:	d905      	bls.n	8000736 <normalizeSticValue+0xca>
		position[2] = 50;
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <normalizeSticValue+0x178>)
 800072c:	2232      	movs	r2, #50	; 0x32
 800072e:	709a      	strb	r2, [r3, #2]
		position[3] = 1;
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <normalizeSticValue+0x178>)
 8000732:	2201      	movs	r2, #1
 8000734:	70da      	strb	r2, [r3, #3]
	}

	if (SticPosADC[2] < 1800 && SticPosADC[2] > 1400) {
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <normalizeSticValue+0x174>)
 8000738:	889b      	ldrh	r3, [r3, #4]
 800073a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800073e:	d20a      	bcs.n	8000756 <normalizeSticValue+0xea>
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <normalizeSticValue+0x174>)
 8000742:	889b      	ldrh	r3, [r3, #4]
 8000744:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000748:	d905      	bls.n	8000756 <normalizeSticValue+0xea>
		position[2] = 20;
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <normalizeSticValue+0x178>)
 800074c:	2214      	movs	r2, #20
 800074e:	709a      	strb	r2, [r3, #2]
		position[3] = 1;
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <normalizeSticValue+0x178>)
 8000752:	2201      	movs	r2, #1
 8000754:	70da      	strb	r2, [r3, #3]
	}

	////////////////////////////////////////////////////////////////////////////////// НАлево

	if (SticPosADC[2] > 2200 && SticPosADC[2] < 3100) {
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <normalizeSticValue+0x174>)
 8000758:	889b      	ldrh	r3, [r3, #4]
 800075a:	f640 0298 	movw	r2, #2200	; 0x898
 800075e:	4293      	cmp	r3, r2
 8000760:	d90b      	bls.n	800077a <normalizeSticValue+0x10e>
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <normalizeSticValue+0x174>)
 8000764:	889b      	ldrh	r3, [r3, #4]
 8000766:	f640 421b 	movw	r2, #3099	; 0xc1b
 800076a:	4293      	cmp	r3, r2
 800076c:	d805      	bhi.n	800077a <normalizeSticValue+0x10e>
		position[2] = 20;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <normalizeSticValue+0x178>)
 8000770:	2214      	movs	r2, #20
 8000772:	709a      	strb	r2, [r3, #2]
		position[3] = 2;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <normalizeSticValue+0x178>)
 8000776:	2202      	movs	r2, #2
 8000778:	70da      	strb	r2, [r3, #3]
	}

	if (SticPosADC[2] > 3100 && SticPosADC[2] < 3800) {
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <normalizeSticValue+0x174>)
 800077c:	889b      	ldrh	r3, [r3, #4]
 800077e:	f640 421c 	movw	r2, #3100	; 0xc1c
 8000782:	4293      	cmp	r3, r2
 8000784:	d90b      	bls.n	800079e <normalizeSticValue+0x132>
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <normalizeSticValue+0x174>)
 8000788:	889b      	ldrh	r3, [r3, #4]
 800078a:	f640 62d7 	movw	r2, #3799	; 0xed7
 800078e:	4293      	cmp	r3, r2
 8000790:	d805      	bhi.n	800079e <normalizeSticValue+0x132>
		position[2] = 65;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <normalizeSticValue+0x178>)
 8000794:	2241      	movs	r2, #65	; 0x41
 8000796:	709a      	strb	r2, [r3, #2]
		position[3] = 2;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <normalizeSticValue+0x178>)
 800079a:	2202      	movs	r2, #2
 800079c:	70da      	strb	r2, [r3, #3]
	}

	if (SticPosADC[2] > 3800) {
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <normalizeSticValue+0x174>)
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	f640 62d8 	movw	r2, #3800	; 0xed8
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d905      	bls.n	80007b6 <normalizeSticValue+0x14a>
		position[2] = 100;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <normalizeSticValue+0x178>)
 80007ac:	2264      	movs	r2, #100	; 0x64
 80007ae:	709a      	strb	r2, [r3, #2]
		position[3] = 2;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <normalizeSticValue+0x178>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	70da      	strb	r2, [r3, #3]
	}

	/////////////////////////////////////////////////////////////////////////////////////// на месте

	if (SticPosADC[2] > 1800 && SticPosADC[2] < 2200) {
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <normalizeSticValue+0x174>)
 80007b8:	889b      	ldrh	r3, [r3, #4]
 80007ba:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80007be:	d90b      	bls.n	80007d8 <normalizeSticValue+0x16c>
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <normalizeSticValue+0x174>)
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	f640 0297 	movw	r2, #2199	; 0x897
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d805      	bhi.n	80007d8 <normalizeSticValue+0x16c>
		position[2] = 0;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <normalizeSticValue+0x178>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	709a      	strb	r2, [r3, #2]
		position[3] = 0;
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <normalizeSticValue+0x178>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	70da      	strb	r2, [r3, #3]
	}
	////////////////////////////////////////////////////////////////////////////////////////

}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000090 	.word	0x20000090
 80007e4:	20000098 	.word	0x20000098

080007e8 <pushArrTX>:

uint8_t pushArrTX(uint8_t addres_module, uint8_t *pData, uint8_t size,
		uint8_t typeOperation) {
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6039      	str	r1, [r7, #0]
 80007f0:	4611      	mov	r1, r2
 80007f2:	461a      	mov	r2, r3
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	460b      	mov	r3, r1
 80007fa:	71bb      	strb	r3, [r7, #6]
 80007fc:	4613      	mov	r3, r2
 80007fe:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
	while (transmitBuff[i] != 0xFF) { // найти конец полезных данных, не выходя за пределы массива.
 8000804:	e00b      	b.n	800081e <pushArrTX+0x36>
		if (i < (end_array_index - (size + 5))) { //5 = адрес модуля, тип операции, crc, байт конца команды, стоп.
 8000806:	7bfa      	ldrb	r2, [r7, #15]
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 800080e:	429a      	cmp	r2, r3
 8000810:	da03      	bge.n	800081a <pushArrTX+0x32>
			i++;
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	3301      	adds	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e001      	b.n	800081e <pushArrTX+0x36>
		} else {
			return 1;
 800081a:	2301      	movs	r3, #1
 800081c:	e047      	b.n	80008ae <pushArrTX+0xc6>
	while (transmitBuff[i] != 0xFF) { // найти конец полезных данных, не выходя за пределы массива.
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <pushArrTX+0xd0>)
 8000822:	5cd3      	ldrb	r3, [r2, r3]
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	d1ee      	bne.n	8000806 <pushArrTX+0x1e>
		}
	}
	transmitBuff[i] = addres_module;
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	4923      	ldr	r1, [pc, #140]	; (80008b8 <pushArrTX+0xd0>)
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	54ca      	strb	r2, [r1, r3]
	i++;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	3301      	adds	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
	transmitBuff[i] = typeOperation;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	491f      	ldr	r1, [pc, #124]	; (80008b8 <pushArrTX+0xd0>)
 800083a:	797a      	ldrb	r2, [r7, #5]
 800083c:	54ca      	strb	r2, [r1, r3]
	i++;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	3301      	adds	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]

	for (uint8_t index = i; index < (i + size); index++) {
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	73bb      	strb	r3, [r7, #14]
 8000848:	e00c      	b.n	8000864 <pushArrTX+0x7c>
		transmitBuff[index] = pData[index - i];
 800084a:	7bba      	ldrb	r2, [r7, #14]
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	461a      	mov	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	441a      	add	r2, r3
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	7811      	ldrb	r1, [r2, #0]
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <pushArrTX+0xd0>)
 800085c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t index = i; index < (i + size); index++) {
 800085e:	7bbb      	ldrb	r3, [r7, #14]
 8000860:	3301      	adds	r3, #1
 8000862:	73bb      	strb	r3, [r7, #14]
 8000864:	7bba      	ldrb	r2, [r7, #14]
 8000866:	7bf9      	ldrb	r1, [r7, #15]
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	440b      	add	r3, r1
 800086c:	429a      	cmp	r2, r3
 800086e:	dbec      	blt.n	800084a <pushArrTX+0x62>
	}

	transmitBuff[i + size] = crc(transmitBuff + (i - 2), size + 2); // crc адреса и команды   2 = смещение назад для адреса модуля и типа команды.
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	3b02      	subs	r3, #2
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <pushArrTX+0xd0>)
 8000876:	1898      	adds	r0, r3, r2
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	3302      	adds	r3, #2
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	18d4      	adds	r4, r2, r3
 8000884:	f7ff fe56 	bl	8000534 <crc>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <pushArrTX+0xd0>)
 800088e:	551a      	strb	r2, [r3, r4]
	transmitBuff[i + size + 1] = 0xFC;  // конец команды
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	4413      	add	r3, r2
 8000896:	3301      	adds	r3, #1
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <pushArrTX+0xd0>)
 800089a:	21fc      	movs	r1, #252	; 0xfc
 800089c:	54d1      	strb	r1, [r2, r3]
	transmitBuff[i + size + 2] = 0xFF;  // стоп байт
 800089e:	7bfa      	ldrb	r2, [r7, #15]
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	4413      	add	r3, r2
 80008a4:	3302      	adds	r3, #2
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <pushArrTX+0xd0>)
 80008a8:	21ff      	movs	r1, #255	; 0xff
 80008aa:	54d1      	strb	r1, [r2, r3]

	return 0;
 80008ac:	2300      	movs	r3, #0

}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000028 	.word	0x20000028

080008bc <connect_ok>:

void connect_ok(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t ok = 0xc8;
 80008c2:	23c8      	movs	r3, #200	; 0xc8
 80008c4:	71fb      	strb	r3, [r7, #7]
	pushArrTX(adress_slave_device, &ok, 1, 1);				// можно пересылать настройки, которые были сделаны на пульте до коннекта слейва.
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <connect_ok+0x24>)
 80008c8:	7818      	ldrb	r0, [r3, #0]
 80008ca:	1df9      	adds	r1, r7, #7
 80008cc:	2301      	movs	r3, #1
 80008ce:	2201      	movs	r2, #1
 80008d0:	f7ff ff8a 	bl	80007e8 <pushArrTX>
	transmit();
 80008d4:	f7ff fe5e 	bl	8000594 <transmit>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000008e 	.word	0x2000008e

080008e4 <parseArrRX>:

void parseArrRX(uint8_t *pData, uint8_t size) {
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]

	if (reciveBuff[flagEvent.rxSize - 2] == crc(reciveBuff, flagEvent.rxSize - 3)) {   //хеш сумма совпала
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <parseArrRX+0xa4>)
 80008f2:	795b      	ldrb	r3, [r3, #5]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	3b02      	subs	r3, #2
 80008f8:	4a24      	ldr	r2, [pc, #144]	; (800098c <parseArrRX+0xa8>)
 80008fa:	5cd4      	ldrb	r4, [r2, r3]
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <parseArrRX+0xa4>)
 80008fe:	795b      	ldrb	r3, [r3, #5]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	3b03      	subs	r3, #3
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4619      	mov	r1, r3
 8000908:	4820      	ldr	r0, [pc, #128]	; (800098c <parseArrRX+0xa8>)
 800090a:	f7ff fe13 	bl	8000534 <crc>
 800090e:	4603      	mov	r3, r0
 8000910:	429c      	cmp	r4, r3
 8000912:	d12a      	bne.n	800096a <parseArrRX+0x86>
		if (flagEvent.contact == 0) {  										//если это приветствие
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <parseArrRX+0xa4>)
 8000916:	799b      	ldrb	r3, [r3, #6]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d115      	bne.n	800094a <parseArrRX+0x66>
			adress_slave_device = reciveBuff[0];
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <parseArrRX+0xa8>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <parseArrRX+0xac>)
 8000924:	701a      	strb	r2, [r3, #0]
			flagEvent.contact = 1;
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <parseArrRX+0xa4>)
 8000928:	2201      	movs	r2, #1
 800092a:	719a      	strb	r2, [r3, #6]
			__HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF); 		// очищаем флаг
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <parseArrRX+0xb0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f06f 0201 	mvn.w	r2, #1
 8000934:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim3); 					//Включаем прерывание
 8000936:	4817      	ldr	r0, [pc, #92]	; (8000994 <parseArrRX+0xb0>)
 8000938:	f002 fd86 	bl	8003448 <HAL_TIM_Base_Start_IT>
			cleanTxArr(adress_slave_device);
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <parseArrRX+0xac>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fe33 	bl	80005ac <cleanTxArr>
			connect_ok();
 8000946:	f7ff ffb9 	bl	80008bc <connect_ok>
		}


		if (flagEvent.contact == 1) {											//если уже поздоровались
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <parseArrRX+0xa4>)
 800094c:	799b      	ldrb	r3, [r3, #6]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b01      	cmp	r3, #1
 8000952:	d10a      	bne.n	800096a <parseArrRX+0x86>
			if(reciveBuff[3] != 0x64){								//если слейв сообщил о принятии битого хеша
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <parseArrRX+0xa8>)
 8000956:	78db      	ldrb	r3, [r3, #3]
 8000958:	2b64      	cmp	r3, #100	; 0x64
 800095a:	d006      	beq.n	800096a <parseArrRX+0x86>
				flagEvent.counterError++;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <parseArrRX+0xa4>)
 800095e:	79db      	ldrb	r3, [r3, #7]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <parseArrRX+0xa4>)
 8000968:	71da      	strb	r2, [r3, #7]
			}
		}
	}

	if (reciveBuff[flagEvent.rxSize - 2] != crc(reciveBuff, flagEvent.rxSize - 3)) {
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <parseArrRX+0xa4>)
 800096c:	795b      	ldrb	r3, [r3, #5]
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <parseArrRX+0xa4>)
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	3b03      	subs	r3, #3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	4804      	ldr	r0, [pc, #16]	; (800098c <parseArrRX+0xa8>)
 800097c:	f7ff fdda 	bl	8000534 <crc>
	}   //хеш сумма не совпала

}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	2000016c 	.word	0x2000016c
 800098c:	2000005c 	.word	0x2000005c
 8000990:	2000008e 	.word	0x2000008e
 8000994:	20000174 	.word	0x20000174

08000998 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800099c:	f000 fb0a 	bl	8000fb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009a0:	f000 f860 	bl	8000a64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009a4:	f7ff fd04 	bl	80003b0 <MX_GPIO_Init>
	MX_DMA_Init();
 80009a8:	f7ff fcd4 	bl	8000354 <MX_DMA_Init>
	MX_ADC1_Init();
 80009ac:	f7ff fbce 	bl	800014c <MX_ADC1_Init>
	MX_I2C1_Init();
 80009b0:	f7ff fd54 	bl	800045c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80009b4:	f000 fa04 	bl	8000dc0 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80009b8:	f000 f98e 	bl	8000cd8 <MX_TIM3_Init>
	MX_CRC_Init();
 80009bc:	f7ff fc98 	bl	80002f0 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	initPult();
 80009c0:	f7ff fe1a 	bl	80005f8 <initPult>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (flagEvent.rxReady == 1) {
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <main+0xb4>)
 80009c6:	78db      	ldrb	r3, [r3, #3]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d10e      	bne.n	80009ec <main+0x54>
			flagEvent.rxReady = 0;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <main+0xb4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	70da      	strb	r2, [r3, #3]
			parseArrRX(reciveBuff, flagEvent.rxSize);
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <main+0xb4>)
 80009d6:	795b      	ldrb	r3, [r3, #5]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4619      	mov	r1, r3
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <main+0xb8>)
 80009de:	f7ff ff81 	bl	80008e4 <parseArrRX>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, reciveBuff,
 80009e2:	2232      	movs	r2, #50	; 0x32
 80009e4:	491a      	ldr	r1, [pc, #104]	; (8000a50 <main+0xb8>)
 80009e6:	481b      	ldr	r0, [pc, #108]	; (8000a54 <main+0xbc>)
 80009e8:	f003 f97c 	bl	8003ce4 <HAL_UARTEx_ReceiveToIdle_DMA>
					sizeof(reciveBuff));
		}

		if (flagEvent.timerEvent == 1) {
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <main+0xb4>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d104      	bne.n	8000a00 <main+0x68>
			flagEvent.timerEvent = 0;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <main+0xb4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
			updateTimerEvent();
 80009fc:	f7ff fe28 	bl	8000650 <updateTimerEvent>
		}

		if (flagEvent.adcDone == 1) {
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <main+0xb4>)
 8000a02:	785b      	ldrb	r3, [r3, #1]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d105      	bne.n	8000a16 <main+0x7e>
			flagEvent.adcDone = 0;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <main+0xb4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
			flagEvent.dataReady = 1;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <main+0xb4>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	709a      	strb	r2, [r3, #2]
		}

		if (flagEvent.dataReady == 1) {
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <main+0xb4>)
 8000a18:	789b      	ldrb	r3, [r3, #2]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d1d1      	bne.n	80009c4 <main+0x2c>
			flagEvent.dataReady = 0;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <main+0xb4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	709a      	strb	r2, [r3, #2]
			normalizeSticValue();
 8000a26:	f7ff fe21 	bl	800066c <normalizeSticValue>
			pushArrTX(adress_ADC, position, (sizeof(position)), 1); // заполнили массив данными для отправки
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	490a      	ldr	r1, [pc, #40]	; (8000a58 <main+0xc0>)
 8000a30:	2096      	movs	r0, #150	; 0x96
 8000a32:	f7ff fed9 	bl	80007e8 <pushArrTX>

			HAL_UART_Transmit_DMA(&huart1, transmitBuff, sizeof(transmitBuff)); //пока что отправляется весь массив.
 8000a36:	2232      	movs	r2, #50	; 0x32
 8000a38:	4908      	ldr	r1, [pc, #32]	; (8000a5c <main+0xc4>)
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <main+0xbc>)
 8000a3c:	f003 f8e6 	bl	8003c0c <HAL_UART_Transmit_DMA>
			//HAL_UART_Transmit(&huart1, transmitBuff, sizeof(transmitBuff), 100); // отправили массив

			cleanTxArr(adress_slave_device);
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <main+0xc8>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fdb1 	bl	80005ac <cleanTxArr>
		if (flagEvent.rxReady == 1) {
 8000a4a:	e7bb      	b.n	80009c4 <main+0x2c>
 8000a4c:	2000016c 	.word	0x2000016c
 8000a50:	2000005c 	.word	0x2000005c
 8000a54:	20000244 	.word	0x20000244
 8000a58:	20000098 	.word	0x20000098
 8000a5c:	20000028 	.word	0x20000028
 8000a60:	2000008e 	.word	0x2000008e

08000a64 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	; 0x50
 8000a68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6e:	2228      	movs	r2, #40	; 0x28
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 fec0 	bl	80047f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aa8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fee4 	bl	8002880 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x5e>
		Error_Handler();
 8000abe:	f000 f86b 	bl	8000b98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 f94e 	bl	8002d80 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x8a>
		Error_Handler();
 8000aea:	f000 f855 	bl	8000b98 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aee:	2302      	movs	r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000af2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000af6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fada 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xa6>
		Error_Handler();
 8000b06:	f000 f847 	bl	8000b98 <Error_Handler>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <ADC1_2_IRQHandler>:

/* USER CODE BEGIN 4 */
//==============================================================================================================
void ADC1_IRQHandler(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_2_IRQn 0 */

	/* USER CODE END ADC1_2_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <ADC1_2_IRQHandler+0x10>)
 8000b1a:	f000 fc63 	bl	80013e4 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC1_2_IRQn 1 */

	/* USER CODE END ADC1_2_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000009c 	.word	0x2000009c

08000b28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d102      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagEvent.timerEvent = 1;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]

	}
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40000400 	.word	0x40000400
 8000b50:	2000016c 	.word	0x2000016c

08000b54 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	flagEvent.adcDone = 1;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_ADC_ConvCpltCallback+0x18>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	705a      	strb	r2, [r3, #1]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	2000016c 	.word	0x2000016c

08000b70 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
	//HAL_UART_Transmit(&huart1, reciveBuff, Size, 100);
	flagEvent.rxReady = 1;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_UARTEx_RxEventCallback+0x24>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	70da      	strb	r2, [r3, #3]
	flagEvent.rxSize = Size;
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_UARTEx_RxEventCallback+0x24>)
 8000b88:	715a      	strb	r2, [r3, #5]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	2000016c 	.word	0x2000016c

08000b98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_MspInit+0x60>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_MspInit+0x60>)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f9f7 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <DMA1_Channel1_IRQHandler+0x10>)
 8000c5e:	f001 f9e3 	bl	8002028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000cc 	.word	0x200000cc

08000c6c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA1_Channel4_IRQHandler+0x10>)
 8000c72:	f001 f9d9 	bl	8002028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200001bc 	.word	0x200001bc

08000c80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <DMA1_Channel5_IRQHandler+0x10>)
 8000c86:	f001 f9cf 	bl	8002028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000200 	.word	0x20000200

08000c94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM3_IRQHandler+0x10>)
 8000c9a:	f002 fc21 	bl	80034e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000174 	.word	0x20000174

08000ca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <USART1_IRQHandler+0x10>)
 8000cae:	f003 f869 	bl	8003d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000244 	.word	0x20000244

08000cbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000cc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cc4:	f001 fc76 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000cf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000cfc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000d00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d1e:	f002 fb43 	bl	80033a8 <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d28:	f7ff ff36 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d3a:	f002 fcd9 	bl	80036f0 <HAL_TIM_ConfigClockSource>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d44:	f7ff ff28 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d56:	f002 fea1 	bl	8003a9c <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d60:	f7ff ff1a 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000174 	.word	0x20000174
 8000d70:	40000400 	.word	0x40000400

08000d74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_TIM_Base_MspInit+0x44>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d113      	bne.n	8000dae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_TIM_Base_MspInit+0x48>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_TIM_Base_MspInit+0x48>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_TIM_Base_MspInit+0x48>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	201d      	movs	r0, #29
 8000da4:	f000 ff83 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000da8:	201d      	movs	r0, #29
 8000daa:	f000 ff9c 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40000400 	.word	0x40000400
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <MX_USART1_UART_Init+0x50>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000df8:	f002 feba 	bl	8003b70 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e02:	f7ff fec9 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000244 	.word	0x20000244
 8000e10:	40013800 	.word	0x40013800

08000e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a47      	ldr	r2, [pc, #284]	; (8000f4c <HAL_UART_MspInit+0x138>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	f040 8086 	bne.w	8000f42 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e36:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_UART_MspInit+0x13c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a45      	ldr	r2, [pc, #276]	; (8000f50 <HAL_UART_MspInit+0x13c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <HAL_UART_MspInit+0x13c>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <HAL_UART_MspInit+0x13c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a3f      	ldr	r2, [pc, #252]	; (8000f50 <HAL_UART_MspInit+0x13c>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <HAL_UART_MspInit+0x13c>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4836      	ldr	r0, [pc, #216]	; (8000f54 <HAL_UART_MspInit+0x140>)
 8000e7c:	f001 fa08 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	482f      	ldr	r0, [pc, #188]	; (8000f54 <HAL_UART_MspInit+0x140>)
 8000e96:	f001 f9fb 	bl	8002290 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000e9c:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <HAL_UART_MspInit+0x148>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000eca:	4823      	ldr	r0, [pc, #140]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000ecc:	f000 ff42 	bl	8001d54 <HAL_DMA_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000ed6:	f7ff fe5f 	bl	8000b98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0x144>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000ee8:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_UART_MspInit+0x150>)
 8000eea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000eee:	2210      	movs	r2, #16
 8000ef0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f16:	4812      	ldr	r0, [pc, #72]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000f18:	f000 ff1c 	bl	8001d54 <HAL_DMA_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000f22:	f7ff fe39 	bl	8000b98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <HAL_UART_MspInit+0x14c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2105      	movs	r1, #5
 8000f36:	2025      	movs	r0, #37	; 0x25
 8000f38:	f000 feb9 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f3c:	2025      	movs	r0, #37	; 0x25
 8000f3e:	f000 fed2 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	20000200 	.word	0x20000200
 8000f5c:	40020058 	.word	0x40020058
 8000f60:	200001bc 	.word	0x200001bc
 8000f64:	40020044 	.word	0x40020044

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f8e:	f7ff fe9d 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f003 fc0d 	bl	80047b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fcff 	bl	8000998 <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fa4:	08004860 	.word	0x08004860
  ldr r2, =_sbss
 8000fa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fac:	2000028c 	.word	0x2000028c

08000fb0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <CAN1_RX1_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 fe67 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fde8 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fe7f 	bl	8001d02 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 fe47 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000008 	.word	0x20000008
 8001060:	20000288 	.word	0x20000288

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000288 	.word	0x20000288

08001078 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0be      	b.n	8001218 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d109      	bne.n	80010bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff f8b2 	bl	8000220 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 fbc1 	bl	8001844 <ADC_ConversionStop_Disable>
 80010c2:	4603      	mov	r3, r0
 80010c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f040 8099 	bne.w	8001206 <HAL_ADC_Init+0x18e>
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f040 8095 	bne.w	8001206 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e4:	f023 0302 	bic.w	r3, r3, #2
 80010e8:	f043 0202 	orr.w	r2, r3, #2
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7b1b      	ldrb	r3, [r3, #12]
 80010fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001100:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4313      	orrs	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001110:	d003      	beq.n	800111a <HAL_ADC_Init+0xa2>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d102      	bne.n	8001120 <HAL_ADC_Init+0xa8>
 800111a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111e:	e000      	b.n	8001122 <HAL_ADC_Init+0xaa>
 8001120:	2300      	movs	r3, #0
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7d1b      	ldrb	r3, [r3, #20]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d119      	bne.n	8001164 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7b1b      	ldrb	r3, [r3, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d109      	bne.n	800114c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	3b01      	subs	r3, #1
 800113e:	035a      	lsls	r2, r3, #13
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	e00b      	b.n	8001164 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	f043 0220 	orr.w	r2, r3, #32
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	f043 0201 	orr.w	r2, r3, #1
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	430a      	orrs	r2, r1
 8001176:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <HAL_ADC_Init+0x1a8>)
 8001180:	4013      	ands	r3, r2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	430b      	orrs	r3, r1
 800118a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001194:	d003      	beq.n	800119e <HAL_ADC_Init+0x126>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d104      	bne.n	80011a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	051b      	lsls	r3, r3, #20
 80011a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_Init+0x1ac>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d10b      	bne.n	80011e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	f023 0303 	bic.w	r3, r3, #3
 80011da:	f043 0201 	orr.w	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e2:	e018      	b.n	8001216 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	f023 0312 	bic.w	r3, r3, #18
 80011ec:	f043 0210 	orr.w	r2, r3, #16
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001204:	e007      	b.n	8001216 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	f043 0210 	orr.w	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001216:	7dfb      	ldrb	r3, [r7, #23]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	ffe1f7fd 	.word	0xffe1f7fd
 8001224:	ff1f0efe 	.word	0xff1f0efe

08001228 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a64      	ldr	r2, [pc, #400]	; (80013d0 <HAL_ADC_Start_DMA+0x1a8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d004      	beq.n	800124c <HAL_ADC_Start_DMA+0x24>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a63      	ldr	r2, [pc, #396]	; (80013d4 <HAL_ADC_Start_DMA+0x1ac>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d106      	bne.n	800125a <HAL_ADC_Start_DMA+0x32>
 800124c:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <HAL_ADC_Start_DMA+0x1a8>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001254:	2b00      	cmp	r3, #0
 8001256:	f040 80b3 	bne.w	80013c0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_ADC_Start_DMA+0x40>
 8001264:	2302      	movs	r3, #2
 8001266:	e0ae      	b.n	80013c6 <HAL_ADC_Start_DMA+0x19e>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f000 fa8d 	bl	8001790 <ADC_Enable>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 809a 	bne.w	80013b6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a4e      	ldr	r2, [pc, #312]	; (80013d4 <HAL_ADC_Start_DMA+0x1ac>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d105      	bne.n	80012ac <HAL_ADC_Start_DMA+0x84>
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <HAL_ADC_Start_DMA+0x1a8>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d115      	bne.n	80012d8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d026      	beq.n	8001314 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012d6:	e01d      	b.n	8001314 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a39      	ldr	r2, [pc, #228]	; (80013d0 <HAL_ADC_Start_DMA+0x1a8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d004      	beq.n	80012f8 <HAL_ADC_Start_DMA+0xd0>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <HAL_ADC_Start_DMA+0x1ac>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d10d      	bne.n	8001314 <HAL_ADC_Start_DMA+0xec>
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_ADC_Start_DMA+0x1a8>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800130c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	f023 0206 	bic.w	r2, r3, #6
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
 800132c:	e002      	b.n	8001334 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4a25      	ldr	r2, [pc, #148]	; (80013d8 <HAL_ADC_Start_DMA+0x1b0>)
 8001342:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a24      	ldr	r2, [pc, #144]	; (80013dc <HAL_ADC_Start_DMA+0x1b4>)
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <HAL_ADC_Start_DMA+0x1b8>)
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f06f 0202 	mvn.w	r2, #2
 800135c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800136c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6a18      	ldr	r0, [r3, #32]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	334c      	adds	r3, #76	; 0x4c
 8001378:	4619      	mov	r1, r3
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f000 fd43 	bl	8001e08 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800138c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001390:	d108      	bne.n	80013a4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013a0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013a2:	e00f      	b.n	80013c4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013b2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013b4:	e006      	b.n	80013c4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80013be:	e001      	b.n	80013c4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40012400 	.word	0x40012400
 80013d4:	40012800 	.word	0x40012800
 80013d8:	080018c7 	.word	0x080018c7
 80013dc:	08001943 	.word	0x08001943
 80013e0:	0800195f 	.word	0x0800195f

080013e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	d140      	bne.n	800147c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b02      	cmp	r3, #2
 8001406:	d139      	bne.n	800147c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800142a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800142e:	d11d      	bne.n	800146c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001434:	2b00      	cmp	r3, #0
 8001436:	d119      	bne.n	800146c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0220 	bic.w	r2, r2, #32
 8001446:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d105      	bne.n	800146c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fb71 	bl	8000b54 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f06f 0212 	mvn.w	r2, #18
 800147a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001486:	2b80      	cmp	r3, #128	; 0x80
 8001488:	d14f      	bne.n	800152a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b04      	cmp	r3, #4
 8001496:	d148      	bne.n	800152a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80014ba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80014be:	d012      	beq.n	80014e6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d125      	bne.n	800151a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014dc:	d11d      	bne.n	800151a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d119      	bne.n	800151a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fae6 	bl	8001aec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f06f 020c 	mvn.w	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001534:	2b40      	cmp	r3, #64	; 0x40
 8001536:	d114      	bne.n	8001562 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10d      	bne.n	8001562 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f812 	bl	800157c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f06f 0201 	mvn.w	r2, #1
 8001560:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x20>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0dc      	b.n	800177a <HAL_ADC_ConfigChannel+0x1da>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d81c      	bhi.n	800160a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b05      	subs	r3, #5
 80015e2:	221f      	movs	r2, #31
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4019      	ands	r1, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b05      	subs	r3, #5
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
 8001608:	e03c      	b.n	8001684 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d81c      	bhi.n	800164c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b23      	subs	r3, #35	; 0x23
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	4019      	ands	r1, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b23      	subs	r3, #35	; 0x23
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
 800164a:	e01b      	b.n	8001684 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b41      	subs	r3, #65	; 0x41
 800165e:	221f      	movs	r2, #31
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	4019      	ands	r1, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b41      	subs	r3, #65	; 0x41
 8001678:	fa00 f203 	lsl.w	r2, r0, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d91c      	bls.n	80016c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68d9      	ldr	r1, [r3, #12]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	3b1e      	subs	r3, #30
 800169e:	2207      	movs	r2, #7
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4019      	ands	r1, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6898      	ldr	r0, [r3, #8]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	3b1e      	subs	r3, #30
 80016b8:	fa00 f203 	lsl.w	r2, r0, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	e019      	b.n	80016fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6919      	ldr	r1, [r3, #16]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	2207      	movs	r2, #7
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	4019      	ands	r1, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6898      	ldr	r0, [r3, #8]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	fa00 f203 	lsl.w	r2, r0, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d003      	beq.n	800170a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001706:	2b11      	cmp	r3, #17
 8001708:	d132      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_ADC_ConfigChannel+0x1e4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d125      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d126      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001730:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b10      	cmp	r3, #16
 8001738:	d11a      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_ADC_ConfigChannel+0x1e8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a13      	ldr	r2, [pc, #76]	; (800178c <HAL_ADC_ConfigChannel+0x1ec>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	0c9a      	lsrs	r2, r3, #18
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001750:	e002      	b.n	8001758 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3b01      	subs	r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f9      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x1b2>
 800175e:	e007      	b.n	8001770 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40012400 	.word	0x40012400
 8001788:	20000000 	.word	0x20000000
 800178c:	431bde83 	.word	0x431bde83

08001790 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d040      	beq.n	8001830 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <ADC_Enable+0xac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <ADC_Enable+0xb0>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9b      	lsrs	r3, r3, #18
 80017ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017cc:	e002      	b.n	80017d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f9      	bne.n	80017ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017da:	f7ff fc43 	bl	8001064 <HAL_GetTick>
 80017de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017e0:	e01f      	b.n	8001822 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017e2:	f7ff fc3f 	bl	8001064 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d918      	bls.n	8001822 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d011      	beq.n	8001822 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f043 0210 	orr.w	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f043 0201 	orr.w	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e007      	b.n	8001832 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b01      	cmp	r3, #1
 800182e:	d1d8      	bne.n	80017e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	431bde83 	.word	0x431bde83

08001844 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b01      	cmp	r3, #1
 800185c:	d12e      	bne.n	80018bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800186e:	f7ff fbf9 	bl	8001064 <HAL_GetTick>
 8001872:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001874:	e01b      	b.n	80018ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001876:	f7ff fbf5 	bl	8001064 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d914      	bls.n	80018ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d10d      	bne.n	80018ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	f043 0210 	orr.w	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e007      	b.n	80018be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d0dc      	beq.n	8001876 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d127      	bne.n	8001930 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018fa:	d115      	bne.n	8001928 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001900:	2b00      	cmp	r3, #0
 8001902:	d111      	bne.n	8001928 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f043 0201 	orr.w	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff f913 	bl	8000b54 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800192e:	e004      	b.n	800193a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fe0a 	bl	800156a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f043 0204 	orr.w	r2, r3, #4
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fe02 	bl	800158e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e095      	b.n	8001ade <HAL_ADCEx_Calibration_Start+0x14a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff42 	bl	8001844 <ADC_ConversionStop_Disable>
 80019c0:	4603      	mov	r3, r0
 80019c2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 8084 	bne.w	8001ad4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019d4:	f023 0302 	bic.w	r3, r3, #2
 80019d8:	f043 0202 	orr.w	r2, r3, #2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019e0:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_ADCEx_Calibration_Start+0x154>)
 80019e2:	681c      	ldr	r4, [r3, #0]
 80019e4:	2002      	movs	r0, #2
 80019e6:	f001 fc1b 	bl	8003220 <HAL_RCCEx_GetPeriphCLKFreq>
 80019ea:	4603      	mov	r3, r0
 80019ec:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80019f0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80019f2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80019f4:	e002      	b.n	80019fc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fec4 	bl	8001790 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0208 	orr.w	r2, r2, #8
 8001a16:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a18:	f7ff fb24 	bl	8001064 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a1e:	e01b      	b.n	8001a58 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a20:	f7ff fb20 	bl	8001064 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d914      	bls.n	8001a58 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00d      	beq.n	8001a58 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	f023 0312 	bic.w	r3, r3, #18
 8001a44:	f043 0210 	orr.w	r2, r3, #16
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e042      	b.n	8001ade <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1dc      	bne.n	8001a20 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0204 	orr.w	r2, r2, #4
 8001a74:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a76:	f7ff faf5 	bl	8001064 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001a7c:	e01b      	b.n	8001ab6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a7e:	f7ff faf1 	bl	8001064 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b0a      	cmp	r3, #10
 8001a8a:	d914      	bls.n	8001ab6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f023 0312 	bic.w	r3, r3, #18
 8001aa2:	f043 0210 	orr.w	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e013      	b.n	8001ade <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1dc      	bne.n	8001a7e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f023 0303 	bic.w	r3, r3, #3
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd90      	pop	{r4, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <__NVIC_EnableIRQ+0x34>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff90 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff2d 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff42 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff35 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e00e      	b.n	8001d4a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	795b      	ldrb	r3, [r3, #5]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d105      	bne.n	8001d42 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7fe faeb 	bl	8000318 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e043      	b.n	8001df2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_DMA_Init+0xa8>)
 8001d72:	4413      	add	r3, r2
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_DMA_Init+0xac>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	009a      	lsls	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_DMA_Init+0xb0>)
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001da2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	bffdfff8 	.word	0xbffdfff8
 8001e00:	cccccccd 	.word	0xcccccccd
 8001e04:	40020000 	.word	0x40020000

08001e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Start_IT+0x20>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e04a      	b.n	8001ebe <HAL_DMA_Start_IT+0xb6>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d13a      	bne.n	8001eb0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f9e8 	bl	8002234 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 020e 	orr.w	r2, r2, #14
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e00f      	b.n	8001e9e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0204 	bic.w	r2, r2, #4
 8001e8c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 020a 	orr.w	r2, r2, #10
 8001e9c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e005      	b.n	8001ebc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d008      	beq.n	8001eee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e020      	b.n	8001f30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 020e 	bic.w	r2, r2, #14
 8001efc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d005      	beq.n	8001f5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e051      	b.n	8002002 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020e 	bic.w	r2, r2, #14
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_DMA_Abort_IT+0xd0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d029      	beq.n	8001fdc <HAL_DMA_Abort_IT+0xa0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_DMA_Abort_IT+0xd4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d022      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x9c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_DMA_Abort_IT+0xd8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d01a      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0x96>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_DMA_Abort_IT+0xdc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d012      	beq.n	8001fcc <HAL_DMA_Abort_IT+0x90>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_DMA_Abort_IT+0xe0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00a      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x8a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <HAL_DMA_Abort_IT+0xe4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d102      	bne.n	8001fc0 <HAL_DMA_Abort_IT+0x84>
 8001fba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fbe:	e00e      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc4:	e00b      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fca:	e008      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	e005      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd6:	e002      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fd8:	2310      	movs	r3, #16
 8001fda:	e000      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_DMA_Abort_IT+0xe8>)
 8001fe0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    } 
  }
  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020008 	.word	0x40020008
 8002010:	4002001c 	.word	0x4002001c
 8002014:	40020030 	.word	0x40020030
 8002018:	40020044 	.word	0x40020044
 800201c:	40020058 	.word	0x40020058
 8002020:	4002006c 	.word	0x4002006c
 8002024:	40020000 	.word	0x40020000

08002028 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2204      	movs	r2, #4
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d04f      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xc8>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d04a      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0204 	bic.w	r2, r2, #4
 8002076:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a66      	ldr	r2, [pc, #408]	; (8002218 <HAL_DMA_IRQHandler+0x1f0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d029      	beq.n	80020d6 <HAL_DMA_IRQHandler+0xae>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a65      	ldr	r2, [pc, #404]	; (800221c <HAL_DMA_IRQHandler+0x1f4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d022      	beq.n	80020d2 <HAL_DMA_IRQHandler+0xaa>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a63      	ldr	r2, [pc, #396]	; (8002220 <HAL_DMA_IRQHandler+0x1f8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01a      	beq.n	80020cc <HAL_DMA_IRQHandler+0xa4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a62      	ldr	r2, [pc, #392]	; (8002224 <HAL_DMA_IRQHandler+0x1fc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d012      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x9e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a60      	ldr	r2, [pc, #384]	; (8002228 <HAL_DMA_IRQHandler+0x200>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00a      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x98>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a5f      	ldr	r2, [pc, #380]	; (800222c <HAL_DMA_IRQHandler+0x204>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d102      	bne.n	80020ba <HAL_DMA_IRQHandler+0x92>
 80020b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020b8:	e00e      	b.n	80020d8 <HAL_DMA_IRQHandler+0xb0>
 80020ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020be:	e00b      	b.n	80020d8 <HAL_DMA_IRQHandler+0xb0>
 80020c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020c4:	e008      	b.n	80020d8 <HAL_DMA_IRQHandler+0xb0>
 80020c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ca:	e005      	b.n	80020d8 <HAL_DMA_IRQHandler+0xb0>
 80020cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d0:	e002      	b.n	80020d8 <HAL_DMA_IRQHandler+0xb0>
 80020d2:	2340      	movs	r3, #64	; 0x40
 80020d4:	e000      	b.n	80020d8 <HAL_DMA_IRQHandler+0xb0>
 80020d6:	2304      	movs	r3, #4
 80020d8:	4a55      	ldr	r2, [pc, #340]	; (8002230 <HAL_DMA_IRQHandler+0x208>)
 80020da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8094 	beq.w	800220e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020ee:	e08e      	b.n	800220e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	2202      	movs	r2, #2
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d056      	beq.n	80021ae <HAL_DMA_IRQHandler+0x186>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d051      	beq.n	80021ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 020a 	bic.w	r2, r2, #10
 8002126:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a38      	ldr	r2, [pc, #224]	; (8002218 <HAL_DMA_IRQHandler+0x1f0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d029      	beq.n	800218e <HAL_DMA_IRQHandler+0x166>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a37      	ldr	r2, [pc, #220]	; (800221c <HAL_DMA_IRQHandler+0x1f4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_DMA_IRQHandler+0x162>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a35      	ldr	r2, [pc, #212]	; (8002220 <HAL_DMA_IRQHandler+0x1f8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01a      	beq.n	8002184 <HAL_DMA_IRQHandler+0x15c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a34      	ldr	r2, [pc, #208]	; (8002224 <HAL_DMA_IRQHandler+0x1fc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d012      	beq.n	800217e <HAL_DMA_IRQHandler+0x156>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <HAL_DMA_IRQHandler+0x200>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00a      	beq.n	8002178 <HAL_DMA_IRQHandler+0x150>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a31      	ldr	r2, [pc, #196]	; (800222c <HAL_DMA_IRQHandler+0x204>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d102      	bne.n	8002172 <HAL_DMA_IRQHandler+0x14a>
 800216c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002170:	e00e      	b.n	8002190 <HAL_DMA_IRQHandler+0x168>
 8002172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002176:	e00b      	b.n	8002190 <HAL_DMA_IRQHandler+0x168>
 8002178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217c:	e008      	b.n	8002190 <HAL_DMA_IRQHandler+0x168>
 800217e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002182:	e005      	b.n	8002190 <HAL_DMA_IRQHandler+0x168>
 8002184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002188:	e002      	b.n	8002190 <HAL_DMA_IRQHandler+0x168>
 800218a:	2320      	movs	r3, #32
 800218c:	e000      	b.n	8002190 <HAL_DMA_IRQHandler+0x168>
 800218e:	2302      	movs	r3, #2
 8002190:	4a27      	ldr	r2, [pc, #156]	; (8002230 <HAL_DMA_IRQHandler+0x208>)
 8002192:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d034      	beq.n	800220e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021ac:	e02f      	b.n	800220e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2208      	movs	r2, #8
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d028      	beq.n	8002210 <HAL_DMA_IRQHandler+0x1e8>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 020e 	bic.w	r2, r2, #14
 80021d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
    }
  }
  return;
 800220e:	bf00      	nop
 8002210:	bf00      	nop
}
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40020008 	.word	0x40020008
 800221c:	4002001c 	.word	0x4002001c
 8002220:	40020030 	.word	0x40020030
 8002224:	40020044 	.word	0x40020044
 8002228:	40020058 	.word	0x40020058
 800222c:	4002006c 	.word	0x4002006c
 8002230:	40020000 	.word	0x40020000

08002234 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f202 	lsl.w	r2, r1, r2
 8002250:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d108      	bne.n	8002274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002272:	e007      	b.n	8002284 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	60da      	str	r2, [r3, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
	...

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b08b      	sub	sp, #44	; 0x2c
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a2:	e148      	b.n	8002536 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022a4:	2201      	movs	r2, #1
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8137 	bne.w	8002530 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4aa3      	ldr	r2, [pc, #652]	; (8002554 <HAL_GPIO_Init+0x2c4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d05e      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022cc:	4aa1      	ldr	r2, [pc, #644]	; (8002554 <HAL_GPIO_Init+0x2c4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d875      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022d2:	4aa1      	ldr	r2, [pc, #644]	; (8002558 <HAL_GPIO_Init+0x2c8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d058      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022d8:	4a9f      	ldr	r2, [pc, #636]	; (8002558 <HAL_GPIO_Init+0x2c8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d86f      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022de:	4a9f      	ldr	r2, [pc, #636]	; (800255c <HAL_GPIO_Init+0x2cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d052      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022e4:	4a9d      	ldr	r2, [pc, #628]	; (800255c <HAL_GPIO_Init+0x2cc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d869      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022ea:	4a9d      	ldr	r2, [pc, #628]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d04c      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022f0:	4a9b      	ldr	r2, [pc, #620]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d863      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022f6:	4a9b      	ldr	r2, [pc, #620]	; (8002564 <HAL_GPIO_Init+0x2d4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d046      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022fc:	4a99      	ldr	r2, [pc, #612]	; (8002564 <HAL_GPIO_Init+0x2d4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d85d      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 8002302:	2b12      	cmp	r3, #18
 8002304:	d82a      	bhi.n	800235c <HAL_GPIO_Init+0xcc>
 8002306:	2b12      	cmp	r3, #18
 8002308:	d859      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <HAL_GPIO_Init+0x80>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	0800238b 	.word	0x0800238b
 8002314:	08002365 	.word	0x08002365
 8002318:	08002377 	.word	0x08002377
 800231c:	080023b9 	.word	0x080023b9
 8002320:	080023bf 	.word	0x080023bf
 8002324:	080023bf 	.word	0x080023bf
 8002328:	080023bf 	.word	0x080023bf
 800232c:	080023bf 	.word	0x080023bf
 8002330:	080023bf 	.word	0x080023bf
 8002334:	080023bf 	.word	0x080023bf
 8002338:	080023bf 	.word	0x080023bf
 800233c:	080023bf 	.word	0x080023bf
 8002340:	080023bf 	.word	0x080023bf
 8002344:	080023bf 	.word	0x080023bf
 8002348:	080023bf 	.word	0x080023bf
 800234c:	080023bf 	.word	0x080023bf
 8002350:	080023bf 	.word	0x080023bf
 8002354:	0800236d 	.word	0x0800236d
 8002358:	08002381 	.word	0x08002381
 800235c:	4a82      	ldr	r2, [pc, #520]	; (8002568 <HAL_GPIO_Init+0x2d8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002362:	e02c      	b.n	80023be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	623b      	str	r3, [r7, #32]
          break;
 800236a:	e029      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	3304      	adds	r3, #4
 8002372:	623b      	str	r3, [r7, #32]
          break;
 8002374:	e024      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	3308      	adds	r3, #8
 800237c:	623b      	str	r3, [r7, #32]
          break;
 800237e:	e01f      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	330c      	adds	r3, #12
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e01a      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002392:	2304      	movs	r3, #4
 8002394:	623b      	str	r3, [r7, #32]
          break;
 8002396:	e013      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a0:	2308      	movs	r3, #8
 80023a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	611a      	str	r2, [r3, #16]
          break;
 80023aa:	e009      	b.n	80023c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ac:	2308      	movs	r3, #8
 80023ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	615a      	str	r2, [r3, #20]
          break;
 80023b6:	e003      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          break;
 80023be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	; 0xff
 80023c4:	d801      	bhi.n	80023ca <HAL_GPIO_Init+0x13a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_Init+0x13e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2bff      	cmp	r3, #255	; 0xff
 80023d4:	d802      	bhi.n	80023dc <HAL_GPIO_Init+0x14c>
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	e002      	b.n	80023e2 <HAL_GPIO_Init+0x152>
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	3b08      	subs	r3, #8
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	210f      	movs	r1, #15
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	431a      	orrs	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8090 	beq.w	8002530 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002410:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_GPIO_Init+0x2dc>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a55      	ldr	r2, [pc, #340]	; (800256c <HAL_GPIO_Init+0x2dc>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_GPIO_Init+0x2dc>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002428:	4a51      	ldr	r2, [pc, #324]	; (8002570 <HAL_GPIO_Init+0x2e0>)
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a49      	ldr	r2, [pc, #292]	; (8002574 <HAL_GPIO_Init+0x2e4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00d      	beq.n	8002470 <HAL_GPIO_Init+0x1e0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a48      	ldr	r2, [pc, #288]	; (8002578 <HAL_GPIO_Init+0x2e8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <HAL_GPIO_Init+0x1dc>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a47      	ldr	r2, [pc, #284]	; (800257c <HAL_GPIO_Init+0x2ec>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_GPIO_Init+0x1d8>
 8002464:	2302      	movs	r3, #2
 8002466:	e004      	b.n	8002472 <HAL_GPIO_Init+0x1e2>
 8002468:	2303      	movs	r3, #3
 800246a:	e002      	b.n	8002472 <HAL_GPIO_Init+0x1e2>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_GPIO_Init+0x1e2>
 8002470:	2300      	movs	r3, #0
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	f002 0203 	and.w	r2, r2, #3
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	4093      	lsls	r3, r2
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002482:	493b      	ldr	r1, [pc, #236]	; (8002570 <HAL_GPIO_Init+0x2e0>)
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4933      	ldr	r1, [pc, #204]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	492d      	ldr	r1, [pc, #180]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024d2:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4929      	ldr	r1, [pc, #164]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4923      	ldr	r1, [pc, #140]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	491f      	ldr	r1, [pc, #124]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002504:	4013      	ands	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	4919      	ldr	r1, [pc, #100]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	4915      	ldr	r1, [pc, #84]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 800252c:	4013      	ands	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	3301      	adds	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	f47f aeaf 	bne.w	80022a4 <HAL_GPIO_Init+0x14>
  }
}
 8002546:	bf00      	nop
 8002548:	bf00      	nop
 800254a:	372c      	adds	r7, #44	; 0x2c
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	10320000 	.word	0x10320000
 8002558:	10310000 	.word	0x10310000
 800255c:	10220000 	.word	0x10220000
 8002560:	10210000 	.word	0x10210000
 8002564:	10120000 	.word	0x10120000
 8002568:	10110000 	.word	0x10110000
 800256c:	40021000 	.word	0x40021000
 8002570:	40010000 	.word	0x40010000
 8002574:	40010800 	.word	0x40010800
 8002578:	40010c00 	.word	0x40010c00
 800257c:	40011000 	.word	0x40011000
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	611a      	str	r2, [r3, #16]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f806 	bl	80025e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e12b      	b.n	8002862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fd ff4a 	bl	80004b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800265c:	f000 fce4 	bl	8003028 <HAL_RCC_GetPCLK1Freq>
 8002660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a81      	ldr	r2, [pc, #516]	; (800286c <HAL_I2C_Init+0x274>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d807      	bhi.n	800267c <HAL_I2C_Init+0x84>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a80      	ldr	r2, [pc, #512]	; (8002870 <HAL_I2C_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	bf94      	ite	ls
 8002674:	2301      	movls	r3, #1
 8002676:	2300      	movhi	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e006      	b.n	800268a <HAL_I2C_Init+0x92>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a7d      	ldr	r2, [pc, #500]	; (8002874 <HAL_I2C_Init+0x27c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0e7      	b.n	8002862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a78      	ldr	r2, [pc, #480]	; (8002878 <HAL_I2C_Init+0x280>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a6a      	ldr	r2, [pc, #424]	; (800286c <HAL_I2C_Init+0x274>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d802      	bhi.n	80026cc <HAL_I2C_Init+0xd4>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	e009      	b.n	80026e0 <HAL_I2C_Init+0xe8>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4a69      	ldr	r2, [pc, #420]	; (800287c <HAL_I2C_Init+0x284>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	3301      	adds	r3, #1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	495c      	ldr	r1, [pc, #368]	; (800286c <HAL_I2C_Init+0x274>)
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d819      	bhi.n	8002734 <HAL_I2C_Init+0x13c>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e59      	subs	r1, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fbb1 f3f3 	udiv	r3, r1, r3
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002714:	400b      	ands	r3, r1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_I2C_Init+0x138>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e59      	subs	r1, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fbb1 f3f3 	udiv	r3, r1, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272e:	e051      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002730:	2304      	movs	r3, #4
 8002732:	e04f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d111      	bne.n	8002760 <HAL_I2C_Init+0x168>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	440b      	add	r3, r1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e012      	b.n	8002786 <HAL_I2C_Init+0x18e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Init+0x196>
 800278a:	2301      	movs	r3, #1
 800278c:	e022      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10e      	bne.n	80027b4 <HAL_I2C_Init+0x1bc>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1e58      	subs	r0, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	440b      	add	r3, r1
 80027a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b2:	e00f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6809      	ldr	r1, [r1, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69da      	ldr	r2, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6911      	ldr	r1, [r2, #16]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	430b      	orrs	r3, r1
 8002816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	000186a0 	.word	0x000186a0
 8002870:	001e847f 	.word	0x001e847f
 8002874:	003d08ff 	.word	0x003d08ff
 8002878:	431bde83 	.word	0x431bde83
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e26c      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8087 	beq.w	80029ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a0:	4b92      	ldr	r3, [pc, #584]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ac:	4b8f      	ldr	r3, [pc, #572]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d112      	bne.n	80028de <HAL_RCC_OscConfig+0x5e>
 80028b8:	4b8c      	ldr	r3, [pc, #560]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d10b      	bne.n	80028de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c6:	4b89      	ldr	r3, [pc, #548]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d06c      	beq.n	80029ac <HAL_RCC_OscConfig+0x12c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d168      	bne.n	80029ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e246      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x76>
 80028e8:	4b80      	ldr	r3, [pc, #512]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7f      	ldr	r2, [pc, #508]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e02e      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x98>
 80028fe:	4b7b      	ldr	r3, [pc, #492]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7a      	ldr	r2, [pc, #488]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b78      	ldr	r3, [pc, #480]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a77      	ldr	r2, [pc, #476]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e01d      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0xbc>
 8002922:	4b72      	ldr	r3, [pc, #456]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a71      	ldr	r2, [pc, #452]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6e      	ldr	r2, [pc, #440]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 800293c:	4b6b      	ldr	r3, [pc, #428]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6a      	ldr	r2, [pc, #424]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b68      	ldr	r3, [pc, #416]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a67      	ldr	r2, [pc, #412]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fb82 	bl	8001064 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fb7e 	bl	8001064 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1fa      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b5d      	ldr	r3, [pc, #372]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0xe4>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe fb6e 	bl	8001064 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe fb6a 	bl	8001064 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1e6      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x10c>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d063      	beq.n	8002a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ba:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029c6:	4b49      	ldr	r3, [pc, #292]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d11c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x18c>
 80029d2:	4b46      	ldr	r3, [pc, #280]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	4b43      	ldr	r3, [pc, #268]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_RCC_OscConfig+0x176>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e1ba      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4939      	ldr	r1, [pc, #228]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0a:	e03a      	b.n	8002a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <HAL_RCC_OscConfig+0x270>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fb23 	bl	8001064 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a22:	f7fe fb1f 	bl	8001064 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e19b      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4927      	ldr	r1, [pc, #156]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_RCC_OscConfig+0x270>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fb02 	bl	8001064 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a64:	f7fe fafe 	bl	8001064 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e17a      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d03a      	beq.n	8002b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_RCC_OscConfig+0x274>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fae2 	bl	8001064 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fade 	bl	8001064 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e15a      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f000 fad8 	bl	8003078 <RCC_Delay>
 8002ac8:	e01c      	b.n	8002b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_OscConfig+0x274>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fac8 	bl	8001064 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad6:	e00f      	b.n	8002af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fac4 	bl	8001064 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d908      	bls.n	8002af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e140      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	42420000 	.word	0x42420000
 8002af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	4b9e      	ldr	r3, [pc, #632]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e9      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80a6 	beq.w	8002c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b97      	ldr	r3, [pc, #604]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b94      	ldr	r3, [pc, #592]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a93      	ldr	r2, [pc, #588]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]
 8002b2e:	4b91      	ldr	r3, [pc, #580]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b8e      	ldr	r3, [pc, #568]	; (8002d78 <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b8b      	ldr	r3, [pc, #556]	; (8002d78 <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a8a      	ldr	r2, [pc, #552]	; (8002d78 <HAL_RCC_OscConfig+0x4f8>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fa85 	bl	8001064 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe fa81 	bl	8001064 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	; 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e0fd      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x4f8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x312>
 8002b84:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a7a      	ldr	r2, [pc, #488]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e02d      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x334>
 8002b9a:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a75      	ldr	r2, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6213      	str	r3, [r2, #32]
 8002ba6:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a72      	ldr	r2, [pc, #456]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6213      	str	r3, [r2, #32]
 8002bb2:	e01c      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x356>
 8002bbc:	4b6d      	ldr	r3, [pc, #436]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4a6c      	ldr	r2, [pc, #432]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a69      	ldr	r2, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a66      	ldr	r2, [pc, #408]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	4b64      	ldr	r3, [pc, #400]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a63      	ldr	r2, [pc, #396]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fa35 	bl	8001064 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fa31 	bl	8001064 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0ab      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	4b57      	ldr	r3, [pc, #348]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ee      	beq.n	8002bfe <HAL_RCC_OscConfig+0x37e>
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c22:	f7fe fa1f 	bl	8001064 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe fa1b 	bl	8001064 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e095      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a47      	ldr	r2, [pc, #284]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8081 	beq.w	8002d6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d061      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d146      	bne.n	8002d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_OscConfig+0x4fc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe f9ef 	bl	8001064 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe f9eb 	bl	8001064 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e067      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d108      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cb2:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	492d      	ldr	r1, [pc, #180]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a19      	ldr	r1, [r3, #32]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	4927      	ldr	r1, [pc, #156]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_OscConfig+0x4fc>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe f9bf 	bl	8001064 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fe f9bb 	bl	8001064 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e037      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x46a>
 8002d08:	e02f      	b.n	8002d6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <HAL_RCC_OscConfig+0x4fc>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f9a8 	bl	8001064 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe f9a4 	bl	8001064 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e020      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x498>
 8002d36:	e018      	b.n	8002d6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e013      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	42420060 	.word	0x42420060

08002d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0d0      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d910      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b67      	ldr	r3, [pc, #412]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 0207 	bic.w	r2, r3, #7
 8002daa:	4965      	ldr	r1, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d040      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d115      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e073      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e06b      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5e:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f023 0203 	bic.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4936      	ldr	r1, [pc, #216]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e70:	f7fe f8f8 	bl	8001064 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fe f8f4 	bl	8001064 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e053      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1eb      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d210      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 0207 	bic.w	r2, r3, #7
 8002eb6:	4922      	ldr	r1, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1cc>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1d0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe f856 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40022000 	.word	0x40022000
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08004840 	.word	0x08004840
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000004 	.word	0x20000004

08002f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b490      	push	{r4, r7}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f5c:	1d3c      	adds	r4, r7, #4
 8002f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f64:	f240 2301 	movw	r3, #513	; 0x201
 8002f68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d002      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d003      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x46>
 8002f92:	e02d      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f96:	623b      	str	r3, [r7, #32]
      break;
 8002f98:	e02d      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	0c9b      	lsrs	r3, r3, #18
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	0c5b      	lsrs	r3, r3, #17
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd2:	fb02 f203 	mul.w	r2, r2, r3
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fde:	e004      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fe4:	fb02 f303 	mul.w	r3, r2, r3
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	623b      	str	r3, [r7, #32]
      break;
 8002fee:	e002      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff2:	623b      	str	r3, [r7, #32]
      break;
 8002ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3728      	adds	r7, #40	; 0x28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc90      	pop	{r4, r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	08004820 	.word	0x08004820
 8003008:	40021000 	.word	0x40021000
 800300c:	007a1200 	.word	0x007a1200
 8003010:	003d0900 	.word	0x003d0900

08003014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <HAL_RCC_GetHCLKFreq+0x10>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	20000000 	.word	0x20000000

08003028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800302c:	f7ff fff2 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4903      	ldr	r1, [pc, #12]	; (800304c <HAL_RCC_GetPCLK1Freq+0x24>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	08004850 	.word	0x08004850

08003050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003054:	f7ff ffde 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	0adb      	lsrs	r3, r3, #11
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	08004850 	.word	0x08004850

08003078 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <RCC_Delay+0x34>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <RCC_Delay+0x38>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0a5b      	lsrs	r3, r3, #9
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003094:	bf00      	nop
  }
  while (Delay --);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1e5a      	subs	r2, r3, #1
 800309a:	60fa      	str	r2, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f9      	bne.n	8003094 <RCC_Delay+0x1c>
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20000000 	.word	0x20000000
 80030b0:	10624dd3 	.word	0x10624dd3

080030b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07d      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d4:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4a4b      	ldr	r2, [pc, #300]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	61d3      	str	r3, [r2, #28]
 80030ec:	4b49      	ldr	r3, [pc, #292]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b46      	ldr	r3, [pc, #280]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d118      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003108:	4b43      	ldr	r3, [pc, #268]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a42      	ldr	r2, [pc, #264]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003112:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003114:	f7fd ffa6 	bl	8001064 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	e008      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311c:	f7fd ffa2 	bl	8001064 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e06d      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800313a:	4b36      	ldr	r3, [pc, #216]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d02e      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	429a      	cmp	r2, r3
 8003156:	d027      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003158:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003160:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003162:	4b2e      	ldr	r3, [pc, #184]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003168:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800316e:	4a29      	ldr	r2, [pc, #164]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d014      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fd ff71 	bl	8001064 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fd ff6d 	bl	8001064 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e036      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ee      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4917      	ldr	r1, [pc, #92]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d105      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	4a13      	ldr	r2, [pc, #76]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	490b      	ldr	r1, [pc, #44]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	4904      	ldr	r1, [pc, #16]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
 800321c:	42420440 	.word	0x42420440

08003220 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b08d      	sub	sp, #52	; 0x34
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003228:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800322a:	f107 040c 	add.w	r4, r7, #12
 800322e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003234:	f240 2301 	movw	r3, #513	; 0x201
 8003238:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
 800323e:	2300      	movs	r3, #0
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	2300      	movs	r3, #0
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b10      	cmp	r3, #16
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b10      	cmp	r3, #16
 8003258:	f200 8091 	bhi.w	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d04c      	beq.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d07c      	beq.n	8003362 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003268:	e089      	b.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800326a:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003270:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8082 	beq.w	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	0c9b      	lsrs	r3, r3, #18
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800328a:	4413      	add	r3, r2
 800328c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003290:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d018      	beq.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800329c:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c5b      	lsrs	r3, r3, #17
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032aa:	4413      	add	r3, r2
 80032ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032bc:	4a37      	ldr	r2, [pc, #220]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032cc:	e004      	b.n	80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	4a33      	ldr	r2, [pc, #204]	; (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032d8:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e4:	d102      	bne.n	80032ec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032ea:	e04a      	b.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4a2c      	ldr	r2, [pc, #176]	; (80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032fa:	e042      	b.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80032fc:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330c:	d108      	bne.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
 800331e:	e01f      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332a:	d109      	bne.n	8003340 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003338:	f649 4340 	movw	r3, #40000	; 0x9c40
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
 800333e:	e00f      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334a:	d11c      	bne.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d016      	beq.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003358:	f24f 4324 	movw	r3, #62500	; 0xf424
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800335e:	e012      	b.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003360:	e011      	b.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003362:	f7ff fe75 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0b9b      	lsrs	r3, r3, #14
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	3301      	adds	r3, #1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003386:	bf00      	nop
    }
  }
  return (frequency);
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800338a:	4618      	mov	r0, r3
 800338c:	3734      	adds	r7, #52	; 0x34
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	bf00      	nop
 8003394:	08004830 	.word	0x08004830
 8003398:	40021000 	.word	0x40021000
 800339c:	007a1200 	.word	0x007a1200
 80033a0:	003d0900 	.word	0x003d0900
 80033a4:	aaaaaaab 	.word	0xaaaaaaab

080033a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e041      	b.n	800343e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fcd0 	bl	8000d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f000 fa6a 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d001      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e035      	b.n	80034cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_TIM_Base_Start_IT+0x90>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_TIM_Base_Start_IT+0x4e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d004      	beq.n	8003496 <HAL_TIM_Base_Start_IT+0x4e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_TIM_Base_Start_IT+0x94>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d111      	bne.n	80034ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d010      	beq.n	80034ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b8:	e007      	b.n	80034ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0201 	orr.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40000400 	.word	0x40000400

080034e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b02      	cmp	r3, #2
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0202 	mvn.w	r2, #2
 800350c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9b1 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9a4 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9b3 	bl	800389c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b04      	cmp	r3, #4
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0204 	mvn.w	r2, #4
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f987 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f97a 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f989 	bl	800389c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0208 	mvn.w	r2, #8
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2204      	movs	r2, #4
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f95d 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f950 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f95f 	bl	800389c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0210 	mvn.w	r2, #16
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2208      	movs	r2, #8
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f933 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f926 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f935 	bl	800389c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0201 	mvn.w	r2, #1
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fa62 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa67 	bl	8003b5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8f9 	bl	80038ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0220 	mvn.w	r2, #32
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa32 	bl	8003b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIM_ConfigClockSource+0x18>
 8003704:	2302      	movs	r3, #2
 8003706:	e0b3      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x180>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003726:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003740:	d03e      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0xd0>
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	f200 8087 	bhi.w	8003858 <HAL_TIM_ConfigClockSource+0x168>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	f000 8085 	beq.w	800385c <HAL_TIM_ConfigClockSource+0x16c>
 8003752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003756:	d87f      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x168>
 8003758:	2b70      	cmp	r3, #112	; 0x70
 800375a:	d01a      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0xa2>
 800375c:	2b70      	cmp	r3, #112	; 0x70
 800375e:	d87b      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x168>
 8003760:	2b60      	cmp	r3, #96	; 0x60
 8003762:	d050      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x116>
 8003764:	2b60      	cmp	r3, #96	; 0x60
 8003766:	d877      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x168>
 8003768:	2b50      	cmp	r3, #80	; 0x50
 800376a:	d03c      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0xf6>
 800376c:	2b50      	cmp	r3, #80	; 0x50
 800376e:	d873      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x168>
 8003770:	2b40      	cmp	r3, #64	; 0x40
 8003772:	d058      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x136>
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d86f      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x168>
 8003778:	2b30      	cmp	r3, #48	; 0x30
 800377a:	d064      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x156>
 800377c:	2b30      	cmp	r3, #48	; 0x30
 800377e:	d86b      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x168>
 8003780:	2b20      	cmp	r3, #32
 8003782:	d060      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x156>
 8003784:	2b20      	cmp	r3, #32
 8003786:	d867      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x168>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05c      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x156>
 800378c:	2b10      	cmp	r3, #16
 800378e:	d05a      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003790:	e062      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f000 f95c 	bl	8003a5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	609a      	str	r2, [r3, #8]
      break;
 80037be:	e04e      	b.n	800385e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f000 f945 	bl	8003a5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e2:	609a      	str	r2, [r3, #8]
      break;
 80037e4:	e03b      	b.n	800385e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 f8bc 	bl	8003970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2150      	movs	r1, #80	; 0x50
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f913 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 8003804:	e02b      	b.n	800385e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	461a      	mov	r2, r3
 8003814:	f000 f8da 	bl	80039cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2160      	movs	r1, #96	; 0x60
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f903 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 8003824:	e01b      	b.n	800385e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	461a      	mov	r2, r3
 8003834:	f000 f89c 	bl	8003970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2140      	movs	r1, #64	; 0x40
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f8f3 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 8003844:	e00b      	b.n	800385e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f000 f8ea 	bl	8003a2a <TIM_ITRx_SetConfig>
        break;
 8003856:	e002      	b.n	800385e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800385c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a25      	ldr	r2, [pc, #148]	; (8003968 <TIM_Base_SetConfig+0xa8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x28>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x28>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a22      	ldr	r2, [pc, #136]	; (800396c <TIM_Base_SetConfig+0xac>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <TIM_Base_SetConfig+0xa8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0x52>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0x52>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <TIM_Base_SetConfig+0xac>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <TIM_Base_SetConfig+0xa8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d103      	bne.n	8003958 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	615a      	str	r2, [r3, #20]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400

08003970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0201 	bic.w	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800399a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f023 030a 	bic.w	r3, r3, #10
 80039ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f023 0210 	bic.w	r2, r3, #16
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	031b      	lsls	r3, r3, #12
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f043 0307 	orr.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b087      	sub	sp, #28
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	609a      	str	r2, [r3, #8]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e041      	b.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d004      	beq.n	8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10c      	bne.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40000400 	.word	0x40000400

08003b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e03f      	b.n	8003c02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd f93c 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fd6d 	bl	8004694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d153      	bne.n	8003cce <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_UART_Transmit_DMA+0x26>
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e04c      	b.n	8003cd0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Transmit_DMA+0x38>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e045      	b.n	8003cd0 <HAL_UART_Transmit_DMA+0xc4>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2221      	movs	r2, #33	; 0x21
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_UART_Transmit_DMA+0xcc>)
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c78:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_UART_Transmit_DMA+0xd0>)
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c80:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <HAL_UART_Transmit_DMA+0xd4>)
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c88:	2200      	movs	r2, #0
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	f7fe f8b0 	bl	8001e08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cc8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	08004133 	.word	0x08004133
 8003cdc:	08004185 	.word	0x08004185
 8003ce0:	0800426d 	.word	0x0800426d

08003ce4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d13c      	bne.n	8003d78 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e035      	b.n	8003d7a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e02e      	b.n	8003d7a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fae5 	bl	8004300 <UART_Start_Receive_DMA>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d119      	bne.n	8003d74 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d113      	bne.n	8003d70 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0210 	orr.w	r2, r2, #16
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	e001      	b.n	8003d74 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	e000      	b.n	8003d7a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10d      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x52>
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fbb6 	bl	8004540 <UART_Receive_IT>
      return;
 8003dd4:	e17b      	b.n	80040ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80b1 	beq.w	8003f40 <HAL_UART_IRQHandler+0x1bc>
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_UART_IRQHandler+0x70>
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80a6 	beq.w	8003f40 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_UART_IRQHandler+0x90>
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_UART_IRQHandler+0xb0>
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f043 0202 	orr.w	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_UART_IRQHandler+0xd0>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00f      	beq.n	8003e7e <HAL_UART_IRQHandler+0xfa>
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <HAL_UART_IRQHandler+0xee>
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 811e 	beq.w	80040c4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x11e>
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb4f 	bl	8004540 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <HAL_UART_IRQHandler+0x146>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d031      	beq.n	8003f2e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa91 	bl	80043f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d023      	beq.n	8003f26 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d013      	beq.n	8003f1e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	4a76      	ldr	r2, [pc, #472]	; (80040d4 <HAL_UART_IRQHandler+0x350>)
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe f81a 	bl	8001f3c <HAL_DMA_Abort_IT>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	e00e      	b.n	8003f3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8fe 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	e00a      	b.n	8003f3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8fa 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	e006      	b.n	8003f3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8f6 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f3a:	e0c3      	b.n	80040c4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	bf00      	nop
    return;
 8003f3e:	e0c1      	b.n	80040c4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	f040 80a1 	bne.w	800408c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 809b 	beq.w	800408c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8095 	beq.w	800408c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d04e      	beq.n	8004024 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f90:	8a3b      	ldrh	r3, [r7, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8098 	beq.w	80040c8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f9c:	8a3a      	ldrh	r2, [r7, #16]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	f080 8092 	bcs.w	80040c8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8a3a      	ldrh	r2, [r7, #16]
 8003fa8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d02b      	beq.n	800400c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0210 	bic.w	r2, r2, #16
 8004000:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	4618      	mov	r0, r3
 8004008:	f7fd ff5d 	bl	8001ec6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004014:	b29b      	uxth	r3, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	b29b      	uxth	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7fc fda7 	bl	8000b70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004022:	e051      	b.n	80040c8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800402c:	b29b      	uxth	r3, r3
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d047      	beq.n	80040cc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800403c:	8a7b      	ldrh	r3, [r7, #18]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d044      	beq.n	80040cc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004050:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0210 	bic.w	r2, r2, #16
 800407e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004080:	8a7b      	ldrh	r3, [r7, #18]
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fc fd73 	bl	8000b70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800408a:	e01f      	b.n	80040cc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_UART_IRQHandler+0x324>
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f9e6 	bl	8004472 <UART_Transmit_IT>
    return;
 80040a6:	e012      	b.n	80040ce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <HAL_UART_IRQHandler+0x34a>
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa27 	bl	8004510 <UART_EndTransmit_IT>
    return;
 80040c2:	e004      	b.n	80040ce <HAL_UART_IRQHandler+0x34a>
    return;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <HAL_UART_IRQHandler+0x34a>
      return;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <HAL_UART_IRQHandler+0x34a>
      return;
 80040cc:	bf00      	nop
  }
}
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	0800444b 	.word	0x0800444b

080040d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d113      	bne.n	8004176 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004162:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004172:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004174:	e002      	b.n	800417c <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff ffae 	bl	80040d8 <HAL_UART_TxCpltCallback>
}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7ff ffa9 	bl	80040ea <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d12a      	bne.n	8004212 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0210 	bic.w	r2, r2, #16
 8004210:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	2b01      	cmp	r3, #1
 8004218:	d106      	bne.n	8004228 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800421e:	4619      	mov	r1, r3
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7fc fca5 	bl	8000b70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004226:	e002      	b.n	800422e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff ff67 	bl	80040fc <HAL_UART_RxCpltCallback>
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	2b01      	cmp	r3, #1
 800424a:	d108      	bne.n	800425e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	4619      	mov	r1, r3
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7fc fc8a 	bl	8000b70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800425c:	e002      	b.n	8004264 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff55 	bl	800410e <HAL_UART_RxHalfCpltCallback>
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b21      	cmp	r3, #33	; 0x21
 800429e:	d108      	bne.n	80042b2 <UART_DMAError+0x46>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042ac:	68b8      	ldr	r0, [r7, #8]
 80042ae:	f000 f88b 	bl	80043c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b22      	cmp	r3, #34	; 0x22
 80042d2:	d108      	bne.n	80042e6 <UART_DMAError+0x7a>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2200      	movs	r2, #0
 80042de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042e0:	68b8      	ldr	r0, [r7, #8]
 80042e2:	f000 f886 	bl	80043f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0210 	orr.w	r2, r3, #16
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f2:	68b8      	ldr	r0, [r7, #8]
 80042f4:	f7ff ff14 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2222      	movs	r2, #34	; 0x22
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	4a23      	ldr	r2, [pc, #140]	; (80043bc <UART_Start_Receive_DMA+0xbc>)
 800432e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <UART_Start_Receive_DMA+0xc0>)
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <UART_Start_Receive_DMA+0xc4>)
 800433e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	2200      	movs	r2, #0
 8004346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004348:	f107 0308 	add.w	r3, r7, #8
 800434c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	f7fd fd52 	bl	8001e08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004390:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	080041a1 	.word	0x080041a1
 80043c0:	08004237 	.word	0x08004237
 80043c4:	0800426d 	.word	0x0800426d

080043c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80043de:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004408:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0210 	bic.w	r2, r2, #16
 8004430:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff fe5b 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b21      	cmp	r3, #33	; 0x21
 8004484:	d13e      	bne.n	8004504 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d114      	bne.n	80044ba <UART_Transmit_IT+0x48>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d110      	bne.n	80044ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	1c9a      	adds	r2, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	621a      	str	r2, [r3, #32]
 80044b8:	e008      	b.n	80044cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	1c59      	adds	r1, r3, #1
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6211      	str	r1, [r2, #32]
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4619      	mov	r1, r3
 80044da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10f      	bne.n	8004500 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	e000      	b.n	8004506 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
  }
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004526:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fdd1 	bl	80040d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b22      	cmp	r3, #34	; 0x22
 8004552:	f040 8099 	bne.w	8004688 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455e:	d117      	bne.n	8004590 <UART_Receive_IT+0x50>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d113      	bne.n	8004590 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	b29a      	uxth	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	1c9a      	adds	r2, r3, #2
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
 800458e:	e026      	b.n	80045de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d007      	beq.n	80045b4 <UART_Receive_IT+0x74>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <UART_Receive_IT+0x82>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e008      	b.n	80045d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4619      	mov	r1, r3
 80045ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d148      	bne.n	8004684 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0220 	bic.w	r2, r2, #32
 8004600:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004610:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	2b01      	cmp	r3, #1
 8004630:	d123      	bne.n	800467a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0210 	bic.w	r2, r2, #16
 8004646:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b10      	cmp	r3, #16
 8004654:	d10a      	bne.n	800466c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc fa7c 	bl	8000b70 <HAL_UARTEx_RxEventCallback>
 8004678:	e002      	b.n	8004680 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fd3e 	bl	80040fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e002      	b.n	800468a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ce:	f023 030c 	bic.w	r3, r3, #12
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	430b      	orrs	r3, r1
 80046da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <UART_SetConfig+0x114>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046fc:	f7fe fca8 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	e002      	b.n	800470a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004704:	f7fe fc90 	bl	8003028 <HAL_RCC_GetPCLK1Freq>
 8004708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009a      	lsls	r2, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	4a22      	ldr	r2, [pc, #136]	; (80047ac <UART_SetConfig+0x118>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	0119      	lsls	r1, r3, #4
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009a      	lsls	r2, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <UART_SetConfig+0x118>)
 8004742:	fba3 0302 	umull	r0, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2064      	movs	r0, #100	; 0x64
 800474a:	fb00 f303 	mul.w	r3, r0, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	; 0x32
 8004754:	4a15      	ldr	r2, [pc, #84]	; (80047ac <UART_SetConfig+0x118>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004760:	4419      	add	r1, r3
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009a      	lsls	r2, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	fbb2 f2f3 	udiv	r2, r2, r3
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <UART_SetConfig+0x118>)
 800477a:	fba3 0302 	umull	r0, r3, r3, r2
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2064      	movs	r0, #100	; 0x64
 8004782:	fb00 f303 	mul.w	r3, r0, r3
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	3332      	adds	r3, #50	; 0x32
 800478c:	4a07      	ldr	r2, [pc, #28]	; (80047ac <UART_SetConfig+0x118>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	f003 020f 	and.w	r2, r3, #15
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	440a      	add	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40013800 	.word	0x40013800
 80047ac:	51eb851f 	.word	0x51eb851f

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	2600      	movs	r6, #0
 80047b4:	4d0c      	ldr	r5, [pc, #48]	; (80047e8 <__libc_init_array+0x38>)
 80047b6:	4c0d      	ldr	r4, [pc, #52]	; (80047ec <__libc_init_array+0x3c>)
 80047b8:	1b64      	subs	r4, r4, r5
 80047ba:	10a4      	asrs	r4, r4, #2
 80047bc:	42a6      	cmp	r6, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	f000 f822 	bl	8004808 <_init>
 80047c4:	2600      	movs	r6, #0
 80047c6:	4d0a      	ldr	r5, [pc, #40]	; (80047f0 <__libc_init_array+0x40>)
 80047c8:	4c0a      	ldr	r4, [pc, #40]	; (80047f4 <__libc_init_array+0x44>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d8:	4798      	blx	r3
 80047da:	3601      	adds	r6, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e2:	4798      	blx	r3
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	08004858 	.word	0x08004858
 80047ec:	08004858 	.word	0x08004858
 80047f0:	08004858 	.word	0x08004858
 80047f4:	0800485c 	.word	0x0800485c

080047f8 <memset>:
 80047f8:	4603      	mov	r3, r0
 80047fa:	4402      	add	r2, r0
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d100      	bne.n	8004802 <memset+0xa>
 8004800:	4770      	bx	lr
 8004802:	f803 1b01 	strb.w	r1, [r3], #1
 8004806:	e7f9      	b.n	80047fc <memset+0x4>

08004808 <_init>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr

08004814 <_fini>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr
